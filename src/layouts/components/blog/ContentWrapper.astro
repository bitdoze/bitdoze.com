---
import AffiliateOfferBox from '@layouts/components/widgets/AffiliateOfferBox.astro';
import affiliateOffers from '@config/affiliateOffers.json';

// Content from the <slot />
const { content } = Astro.props;

// Function to get an offer by index with fallback
const getOfferByIndex = (index) => {
  const { offers } = affiliateOffers;
  if (offers.length === 0) return null;
  
  // Use modulo to ensure we stay within bounds
  const safeIndex = index % offers.length;
  return offers[safeIndex];
};

// First offer - always after first paragraph
const firstOffer = getOfferByIndex(0);

// Second offer - for middle of content
const secondOffer = getOfferByIndex(1);

// Third offer - for end of content
const thirdOffer = getOfferByIndex(2);

// Map image paths to public directory paths for client-side usage
const getPublicImagePath = (imagePath) => {
  if (!imagePath) return null;
  
  // Convert @images/aff/file.svg to /images/aff/file.svg (public folder)
  if (imagePath.startsWith('@images/')) {
    return imagePath.replace('@images/', '/images/');
  }
  
  return imagePath;
};

// Prepare the offers for client-side usage with proper image paths
const preparedOffers = [firstOffer, secondOffer, thirdOffer]
  .filter(Boolean)
  .map(offer => ({
    ...offer,
    // Use the public path for client-side rendering
    processedImagePath: getPublicImagePath(offer.image)
  }));
---

<div class="content-wrapper">
  <slot />
</div>

<script define:vars={{ preparedOffers }}>
  // Wait for document to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const contentWrapper = document.querySelector('.content-wrapper');
    if (!contentWrapper) return;
    
    // Find all paragraphs in the content
    const paragraphs = contentWrapper.querySelectorAll('p');
    if (paragraphs.length < 2) return; // Need at least 2 paragraphs
    
    // First offer after first paragraph
    if (preparedOffers[0]) {
      const firstOfferHTML = createAffiliateBox(preparedOffers[0], 0);
      paragraphs[0].insertAdjacentHTML('afterend', firstOfferHTML);
    }
    
    // Second offer in the middle of the content
    if (preparedOffers[1] && paragraphs.length >= 4) {
      const middleIndex = Math.floor(paragraphs.length / 2);
      const secondOfferHTML = createAffiliateBox(preparedOffers[1], 1);
      paragraphs[middleIndex].insertAdjacentHTML('afterend', secondOfferHTML);
    }
    
    // Third offer at the end of the content
    if (preparedOffers[2]) {
      const thirdOfferHTML = createAffiliateBox(preparedOffers[2], 2);
      
      // Get the last paragraph and append after it
      const lastParagraph = paragraphs[paragraphs.length - 1];
      lastParagraph.insertAdjacentHTML('afterend', thirdOfferHTML);
    }
  });
  
  // Function to create the affiliate box HTML
  function createAffiliateBox(offer, index) {
    return `
      <div class="not-prose my-6 sm:my-7 overflow-hidden rounded-lg bg-gradient-to-br from-blue-50 via-white to-indigo-50 dark:from-gray-800 dark:via-gray-800 dark:to-gray-800 shadow-md hover:shadow-lg transition-all duration-300 border border-gray-100 dark:border-gray-700 max-w-4xl mx-auto">
        <div class="relative">
          ${offer.discount ? `
            <div class="absolute top-2 right-2 sm:top-3 sm:right-3 bg-gradient-to-r from-red-500 to-pink-500 text-white font-bold py-0.5 px-2 text-xs rounded-full transform rotate-2 shadow-sm z-10">
              ${offer.discount}
            </div>
          ` : ''}
          
          <div class="flex flex-row">
            <div class="w-1/4 bg-white dark:bg-gray-800 border-r border-gray-100 dark:border-gray-700 flex items-center justify-center">
              ${offer.processedImagePath ? `
                <div class="p-3 w-full h-full flex items-center justify-center">
                  <img 
                    src="${offer.processedImagePath}" 
                    alt="${offer.title}" 
                    class="max-w-full max-h-full object-contain"
                    width="200"
                    height="100"
                    loading="lazy"
                    decoding="async"
                    fetchpriority="auto"
                    sizes="(max-width: 640px) 60px, (max-width: 768px) 100px, 200px"
                    onerror="this.onerror=null; this.src='/images/placeholder.svg';"
                  />
                </div>
              ` : `
                <div class="p-3 w-full h-full flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" class="w-12 h-12 text-gray-300 dark:text-gray-500" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2m-4.86 8.86l-3 3.87L9 13.14L6 17h12l-3.86-5.14"/>
                  </svg>
                </div>
              `}
            </div>
            
            <div class="p-4 sm:p-5 w-3/4 flex flex-col justify-between space-y-2">
              <div>
                <h3 class="text-base sm:text-lg font-bold text-gray-900 dark:text-white mb-1 group-hover:text-blue-600 dark:group-hover:text-blue-400">
                  ${offer.title}
                </h3>
                <p class="text-xs sm:text-sm text-gray-700 dark:text-gray-300 line-clamp-2">
                  ${offer.description}
                </p>
              </div>
              
              <div class="mt-auto pt-2">
                <a 
                  href="${offer.ctaUrl}" 
                  target="_blank" 
                  rel="noopener noreferrer sponsored"
                  class="inline-flex items-center justify-center px-5 py-2 text-sm sm:text-base font-medium bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 text-white rounded-md transition-all duration-300 transform hover:-translate-y-0.5 shadow-sm hover:shadow-md"
                >
                  ${offer.ctaText}
                  <svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 h-4 w-4" viewBox="0 0 24 24">
                    <path fill="currentColor" d="M4 11v2h12l-5.5 5.5l1.42 1.42L19.84 12l-7.92-7.92L10.5 5.5L16 11H4z"/>
                  </svg>
                </a>
                <p class="mt-1 text-[10px] sm:text-xs text-gray-500 dark:text-gray-400">
                  *Affiliate link
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    `;
  }
</script>
