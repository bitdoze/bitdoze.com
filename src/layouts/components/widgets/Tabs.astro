---
// This is the parent Tabs component that manages the tab state
---

<div class="not-prose tabs-container my-6">
  <div
    class="tab-list flex flex-wrap border-b border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 rounded-t-lg"
    role="tablist"
  >
    <!-- Tab buttons will be injected here by client-side script -->
  </div>
  <div
    class="tab-panels bg-white dark:bg-gray-900 rounded-b-lg border border-t-0 border-gray-200 dark:border-gray-700"
  >
    <slot />
  </div>
</div>

<script>
  function initTabs() {
    document.querySelectorAll(".tabs-container").forEach((container) => {
      const tabList = container.querySelector(".tab-list");
      const tabPanels = Array.from(container.querySelectorAll(".tab-panel"));

      if (!tabList || tabPanels.length === 0) return;

      // Clear existing tabs (in case of re-initialization)
      tabList.innerHTML = "";

      // Create tab buttons for each panel
      tabPanels.forEach((panel, index) => {
        const tabName = panel.getAttribute("data-name");
        const tabId = `tab-${tabName
          .toLowerCase()
          .replace(/\s+/g, "-")}-${Math.random().toString(36).substring(2, 9)}`;
        panel.id = `${tabId}-panel`;

        const button = document.createElement("button");
        button.id = tabId;
        button.className =
          "tab-button px-4 sm:px-6 py-3 font-medium text-sm sm:text-base focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset transition-all duration-200";
        button.setAttribute("role", "tab");
        button.setAttribute("aria-controls", `${tabId}-panel`);
        button.textContent = tabName;

        // Set first tab as active by default
        if (index === 0) {
          button.classList.add(
            "active",
            "bg-white",
            "dark:bg-gray-900",
            "border-b-2",
            "border-blue-600",
            "text-blue-600",
            "dark:text-blue-500",
            "dark:border-blue-500",
            "font-semibold"
          );
          button.setAttribute("aria-selected", "true");
          panel.classList.remove("hidden");
        } else {
          button.classList.add(
            "bg-gray-50",
            "dark:bg-gray-800",
            "text-gray-600",
            "hover:text-gray-800",
            "hover:bg-gray-100",
            "dark:text-gray-400",
            "dark:hover:text-gray-200",
            "dark:hover:bg-gray-700"
          );
          button.setAttribute("aria-selected", "false");
          panel.classList.add("hidden");
        }

        button.addEventListener("click", () => {
          // Update tab buttons
          tabList.querySelectorAll(".tab-button").forEach((btn) => {
            btn.classList.remove(
              "active",
              "bg-white",
              "dark:bg-gray-900",
              "border-b-2",
              "border-blue-600",
              "text-blue-600",
              "dark:text-blue-500",
              "dark:border-blue-500",
              "font-semibold"
            );
            btn.classList.add(
              "bg-gray-50",
              "dark:bg-gray-800",
              "text-gray-600",
              "hover:text-gray-800",
              "hover:bg-gray-100",
              "dark:text-gray-400",
              "dark:hover:text-gray-200",
              "dark:hover:bg-gray-700"
            );
            btn.setAttribute("aria-selected", "false");
          });

          button.classList.remove(
            "bg-gray-50",
            "dark:bg-gray-800",
            "text-gray-600",
            "hover:text-gray-800",
            "hover:bg-gray-100",
            "dark:text-gray-400",
            "dark:hover:text-gray-200",
            "dark:hover:bg-gray-700"
          );
          button.classList.add(
            "active",
            "bg-white",
            "dark:bg-gray-900",
            "border-b-2",
            "border-blue-600",
            "text-blue-600",
            "dark:text-blue-500",
            "dark:border-blue-500",
            "font-semibold"
          );
          button.setAttribute("aria-selected", "true");

          // Update tab panels
          tabPanels.forEach((p) => p.classList.add("hidden"));
          panel.classList.remove("hidden");
        });

        tabList.appendChild(button);
      });
    });
  }

  // Initialize on page load
  document.addEventListener("DOMContentLoaded", initTabs);

  // Support for dynamically added tabs
  document.addEventListener("astro:after-swap", initTabs);
  document.addEventListener("astro:page-load", initTabs);

  // Initialize immediately if the document is already interactive
  if (
    document.readyState === "complete" ||
    document.readyState === "interactive"
  ) {
    setTimeout(initTabs, 1);
  }

  // Also add a window load event for good measure
  window.addEventListener("load", initTabs);
</script>

<style>
  .tabs-container {
    width: 100%;
    max-width: none;
  }

  .tab-button {
    transition: all 0.2s ease-in-out;
    border-radius: 0.5rem 0.5rem 0 0;
    position: relative;
    z-index: 1;
  }

  .tab-button.active {
    font-weight: 600;
    margin-bottom: -1px;
  }

  .tab-button:first-child {
    border-top-left-radius: 0.5rem;
  }

  .tab-button:last-child {
    border-top-right-radius: 0.5rem;
  }

  .tab-panels {
    width: 100%;
  }

  /* Responsive adjustments */
  @media (max-width: 640px) {
    .tab-button {
      padding: 0.75rem 1rem;
      font-size: 0.875rem;
    }
  }
</style>
