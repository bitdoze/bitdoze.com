---
type Props = {
  url: string;
  label: string;
};
const { url, label } = Astro.props;

// Create a unique ID from the URL for view transitions
// Extract video ID from various YouTube URL formats
let videoId = 'video';
try {
  const urlObj = new URL(url);
  // Handle /embed/VIDEO_ID format
  if (urlObj.pathname.includes('/embed/')) {
    videoId = urlObj.pathname.split('/embed/')[1]?.split('?')[0] ?? 'video';
  }
  // Handle ?v=VIDEO_ID format (youtube.com/watch?v=...)
  else if (urlObj.searchParams.has('v')) {
    videoId = urlObj.searchParams.get('v') ?? 'video';
  }
  // Handle youtu.be/VIDEO_ID format
  else if (urlObj.hostname === 'youtu.be') {
    videoId = urlObj.pathname.split('/')[1]?.split('?')[0] ?? 'video';
  }
} catch {
  // If URL parsing fails, use a fallback based on the URL string
  videoId = url.split('/').pop()?.split('?')[0] ?? 'video';
}
---

<div class="aspect-video" transition:name={`youtube-${videoId}`}>
  <iframe
    class="w-full h-full"
    loading="lazy"
    src={url}
    title={label}
    frame-border="0"
    allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
    allowfullscreen
  >
  </iframe>
</div>
