---
import ThemeToggle from "./ThemeToggle.astro";
import { Image } from "astro:assets";
import menu from "@config/menu.json";
import logoSVG from "@assets/favicons/bitdoze_logo_better.svg";

// Extract main menu items
const mainMenu = menu.main;
const currentPath = Astro.url.pathname;
---

<header
  class="header-nav sticky top-0 z-40 w-full backdrop-blur-lg transition-all duration-500 ease-in-out"
  style="background-color: rgba(255, 255, 255, 0.85); border-bottom: 1px solid rgba(0, 0, 0, 0.1);"
>
  <div class="container mx-auto flex h-16 items-center justify-between px-4 sm:px-6 lg:px-8">
    <!-- Logo -->
    <div class="flex shrink-0 items-center">
      <a href="/" class="logo-link flex items-center gap-2 group">
        <Image
          src={logoSVG}
          alt="BitDoze Logo"
          width={140}
          height={140}
          class="h-8 w-auto transition-transform duration-300 group-hover:scale-105"
        />
      </a>
    </div>

    <!-- Navigation -->
    <nav class="hidden md:flex items-center space-x-2">
      {
        mainMenu.map((item) => {
          if (item.hasChildren) {
            return (
              <div class="relative dropdown">
                <button
                  class="nav-item flex items-center relative px-4 py-2 text-sm font-medium rounded-lg transition-all duration-300 ease-in-out group dropdown-toggle"
                  style="color: rgb(107, 114, 128);"
                  aria-expanded="false"
                  aria-haspopup="true"
                >
                  <span class="relative z-10">{item.name}</span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="ml-1 h-4 w-4 transition-transform duration-200 dropdown-icon"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                  <div
                    class="nav-bg absolute inset-0 rounded-lg bg-gradient-to-r from-transparent via-transparent to-transparent opacity-0 transition-all duration-300 ease-in-out group-hover:opacity-100"
                    style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
                  />
                </button>
                <div class="absolute left-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hidden dropdown-menu transition-all duration-300 opacity-0 z-10 backdrop-blur-lg" style="background-color: rgba(255, 255, 255, 0.95);">
                  <div class="py-1 rounded-md">
                    {item.children.map((child) => (
                      <a
                        href={child.url}
                        class="block px-4 py-2 text-sm text-gray-500 hover:text-blue-600 dark:text-gray-400 dark:hover:text-blue-400 hover:bg-gray-100 dark:hover:bg-gray-700 transition-all duration-200"
                      >
                        {child.name}
                      </a>
                    ))}
                  </div>
                </div>
              </div>
            );
          } else {
            const isActive =
              currentPath === item.url ||
              (item.url !== "/" && currentPath.startsWith(item.url + "/")) ||
              (item.url !== "/" && currentPath === item.url);
            return (
              <a
                href={item.url}
                class="nav-item relative px-4 py-2 text-sm font-medium rounded-lg transition-all duration-300 ease-in-out group"
                style="color: rgb(107, 114, 128);"
                aria-current={isActive ? "page" : undefined}
                data-active={isActive ? "true" : "false"}
              >
                <span class="relative z-10">{item.name}</span>
                <div
                  class="nav-bg absolute inset-0 rounded-lg bg-gradient-to-r from-transparent via-transparent to-transparent opacity-0 transition-all duration-300 ease-in-out group-hover:opacity-100"
                  style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
                />
                <div
                  class="nav-indicator absolute bottom-0 left-1/2 h-0.5 w-0 rounded-full transition-all duration-300 ease-in-out group-hover:w-3/4 group-hover:-translate-x-1/2"
                  style="background-color: rgb(59, 130, 246);"
                />
              </a>
            );
          }
        })
      }
      <!-- Search Icon -->
      <a
        href="/search/"
        class="nav-item relative p-2 rounded-lg transition-all duration-300 ease-in-out group"
        style="color: rgb(107, 114, 128);"
        aria-label="Search"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 relative z-10"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
        <div
          class="nav-bg absolute inset-0 rounded-lg bg-gradient-to-r from-transparent via-transparent to-transparent opacity-0 transition-all duration-300 ease-in-out group-hover:opacity-100"
          style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
        />
      </a>
      <ThemeToggle id="themeToggle-desktop" />
    </nav>

    <!-- Mobile menu button -->
    <div class="flex md:hidden items-center gap-2">
      <ThemeToggle id="themeToggle-mobile-header" />
      <button
        type="button"
        id="mobile-menu-button"
        aria-expanded="false"
        class="mobile-menu-btn inline-flex items-center justify-center p-3 rounded-lg min-h-[48px] min-w-[48px] transition-all duration-300 ease-in-out hover:scale-105 active:scale-95 focus:outline-none"
        style="background-color: rgba(0, 0, 0, 0.05); backdrop-filter: blur(8px);"
      >
        <span class="sr-only">Open main menu</span>
        <div class="hamburger relative w-6 h-6 flex flex-col justify-center items-center">
          <span
            class="hamburger-line w-5 h-0.5 rounded-full transition-all duration-300"
            style="background-color: rgb(107, 114, 128); transform: translateY(-2px);"
          ></span>
          <span
            class="hamburger-line w-5 h-0.5 rounded-full transition-all duration-300 mt-1"
            style="background-color: rgb(107, 114, 128);"></span>
          <span
            class="hamburger-line w-5 h-0.5 rounded-full transition-all duration-300 mt-1"
            style="background-color: rgb(107, 114, 128); transform: translateY(2px);"
          ></span>
        </div>
      </button>
    </div>
  </div>

  <!-- Mobile menu -->
  <div
    id="mobile-menu"
    class="mobile-menu fixed top-16 left-0 right-0 hidden md:hidden transition-all duration-500 ease-in-out transform -translate-y-2 opacity-0 z-50"
    style="background: linear-gradient(135deg, rgba(255, 255, 255, 0.95), rgba(255, 255, 255, 0.9)); backdrop-filter: blur(20px); box-shadow: 0 8px 32px rgba(0, 0, 0, 0.15); border-top: 1px solid rgba(0, 0, 0, 0.1);"
  >
    <div class="space-y-1 p-6">
      {
        mainMenu.map((item, index) => {
          if (item.hasChildren) {
            return (
              <div class="mobile-dropdown">
                <button class="mobile-dropdown-button group flex w-full px-4 py-4 text-base font-medium rounded-xl transition-all duration-300 min-h-[48px] items-center justify-between relative overflow-hidden" style={`transition: all 0.3s; animation-delay: ${index * 50}ms;`}>
                  <span class="relative z-10 transition-transform duration-300 group-hover:translate-x-1">
                    {item.name}
                  </span>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="mobile-dropdown-icon w-5 h-5 transition-all duration-300"
                    style="color: rgb(59, 130, 246);"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M19 9l-7 7-7-7"
                    />
                  </svg>
                  <div
                    class="absolute inset-0 bg-gradient-to-r opacity-0 transition-all duration-300 rounded-xl group-hover:opacity-100"
                    style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
                  />
                </button>
                <div class="mobile-dropdown-content hidden pl-4 py-2 space-y-1">
                  {item.children.map((child) => (
                    <a
                      href={child.url}
                      class="mobile-menu-item group flex px-4 py-3 text-base font-medium rounded-xl transition-all duration-300 min-h-[48px] items-center justify-between relative overflow-hidden"
                    >
                      <span class="relative z-10 transition-transform duration-300 group-hover:translate-x-1">
                        {child.name}
                      </span>
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="w-5 h-5 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-1"
                        style="color: rgb(59, 130, 246);"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M9 5l7 7-7 7"
                        />
                      </svg>
                      <div
                        class="absolute inset-0 bg-gradient-to-r opacity-0 transition-all duration-300 rounded-xl group-hover:opacity-100"
                        style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
                      />
                    </a>
                  ))}
                </div>
              </div>
            );
          } else {
            const isActive =
              currentPath === item.url ||
              (item.url !== "/" && currentPath.startsWith(item.url + "/")) ||
              (item.url !== "/" && currentPath === item.url);
            return (
              <a
                href={item.url}
                class="mobile-menu-item group flex px-4 py-4 text-base font-medium rounded-xl transition-all duration-300 min-h-[48px] items-center justify-between relative overflow-hidden"
                style={`transition: all 0.3s; animation-delay: ${index * 50}ms;`}
                aria-current={isActive ? "page" : undefined}
                data-active={isActive ? "true" : "false"}
              >
                <span class="relative z-10 transition-transform duration-300 group-hover:translate-x-1">
                  {item.name}
                </span>
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="w-5 h-5 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-1"
                  style="color: rgb(59, 130, 246);"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M9 5l7 7-7 7"
                  />
                </svg>
                <div
                  class="absolute inset-0 bg-gradient-to-r opacity-0 transition-all duration-300 rounded-xl group-hover:opacity-100"
                  style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
                />
              </a>
            );
          }
        })
      }
      <a
        href="/search/"
        class="mobile-menu-item group flex px-4 py-4 text-base font-medium rounded-xl transition-all duration-300 min-h-[48px] items-center justify-between relative overflow-hidden"
      >
        <span class="relative z-10 transition-transform duration-300 group-hover:translate-x-1 flex items-center gap-2">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          Search
        </span>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="w-5 h-5 opacity-0 transition-all duration-300 group-hover:opacity-100 group-hover:translate-x-1"
          style="color: rgb(59, 130, 246);"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M9 5l7 7-7 7"
          />
        </svg>
        <div
          class="absolute inset-0 bg-gradient-to-r opacity-0 transition-all duration-300 rounded-xl group-hover:opacity-100"
          style="background: linear-gradient(135deg, rgba(59, 130, 246, 0.1), rgba(147, 51, 234, 0.05));"
        />
      </a>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle functionality with enhanced animations
  function initHeader() {
    const menuButton = document.getElementById("mobile-menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const hamburger = menuButton?.querySelector(".hamburger");
    const hamburgerLines = hamburger?.querySelectorAll(".hamburger-line");

    if (menuButton && mobileMenu && hamburgerLines) {
      menuButton.addEventListener("click", () => {
        const expanded = menuButton.getAttribute("aria-expanded") === "true";
        const isOpening = !expanded;

        menuButton.setAttribute("aria-expanded", isOpening.toString());

        if (isOpening) {
          // Show menu with animation
          mobileMenu.classList.remove("hidden");
          requestAnimationFrame(() => {
            mobileMenu.classList.remove("-translate-y-2", "opacity-0");
            mobileMenu.classList.add("translate-y-0", "opacity-100");
          });

          // Animate hamburger to X
          (hamburgerLines[0] as HTMLElement).style.transform =
            "rotate(45deg) translateY(3px)";
          (hamburgerLines[1] as HTMLElement).style.opacity = "0";
          (hamburgerLines[2] as HTMLElement).style.transform =
            "rotate(-45deg) translateY(-3px)";
        } else {
          // Hide menu with animation
          mobileMenu.classList.remove("translate-y-0", "opacity-100");
          mobileMenu.classList.add("-translate-y-2", "opacity-0");

          // Reset hamburger
          (hamburgerLines[0] as HTMLElement).style.transform =
            "translateY(-2px)";
          (hamburgerLines[1] as HTMLElement).style.opacity = "1";
          (hamburgerLines[2] as HTMLElement).style.transform =
            "translateY(2px)";

          setTimeout(() => {
            mobileMenu.classList.add("hidden");
          }, 500);
        }
      });

      // Close mobile menu when clicking on links
      const mobileMenuItems = mobileMenu.querySelectorAll(".mobile-menu-item");
      mobileMenuItems.forEach((item) => {
        item.addEventListener("click", () => {
          menuButton.click(); // Trigger close
        });
      });
    }

    // Mobile dropdowns
    const mobileDropdownButtons = document.querySelectorAll(
      ".mobile-dropdown-button"
    );

    mobileDropdownButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const content = button.nextElementSibling as HTMLElement | null;
        const icon = button.querySelector(
          ".mobile-dropdown-icon"
        ) as HTMLElement | null;

        if (content && content instanceof HTMLElement) {
          content.classList.toggle("hidden");
        }
        if (icon && icon instanceof HTMLElement) {
          icon.classList.toggle("rotate-180");
        }
      });
    });

    // Header scroll effect
    let lastScrollY = window.scrollY;
    const header = document.querySelector(".header-nav");

    window.addEventListener("scroll", () => {
      const scrollY = window.scrollY;

      if (header) {
        const headerEl = header as HTMLElement;
        if (scrollY > 100) {
          headerEl.style.backgroundColor = "rgba(255, 255, 255, 0.95)";
          headerEl.style.boxShadow = "0 4px 20px rgba(0, 0, 0, 0.1)";
        } else {
          headerEl.style.backgroundColor = "rgba(255, 255, 255, 0.85)";
          headerEl.style.boxShadow = "none";
        }
      }

      lastScrollY = scrollY;
    });

    // Desktop dropdowns
    const dropdownToggles = document.querySelectorAll(".dropdown-toggle");

    // Function to close all dropdowns
    const closeAllDropdowns = () => {
      document.querySelectorAll(".dropdown-menu").forEach((menu) => {
        menu.classList.add("hidden");
        menu.classList.remove("opacity-100");
        menu.classList.add("opacity-0");
      });
      document.querySelectorAll(".dropdown-toggle").forEach((toggle) => {
        toggle.setAttribute("aria-expanded", "false");
        const icon = toggle.querySelector(".dropdown-icon");
        if (icon) {
          icon.classList.remove("rotate-180");
        }
      });
    };

    // Close dropdowns when clicking outside
    document.addEventListener("click", (e) => {
      if (
        e.target &&
        e.target instanceof Element &&
        !e.target.closest(".dropdown")
      ) {
        closeAllDropdowns();
      }
    });

    // Handle dropdown toggle clicks
    dropdownToggles.forEach((toggle) => {
      toggle.addEventListener("click", (e) => {
        e.stopPropagation();
        const dropdown = toggle.closest(".dropdown") as HTMLElement | null;
        if (!dropdown) return;

        const menu = dropdown.querySelector(
          ".dropdown-menu"
        ) as HTMLElement | null;
        const icon = toggle.querySelector(
          ".dropdown-icon"
        ) as HTMLElement | null;
        const isExpanded = toggle.getAttribute("aria-expanded") === "true";

        // Close all other dropdowns
        document.querySelectorAll(".dropdown-toggle").forEach((otherToggle) => {
          if (otherToggle !== toggle) {
            otherToggle.setAttribute("aria-expanded", "false");
            const otherIcon = otherToggle.querySelector(
              ".dropdown-icon"
            ) as HTMLElement | null;
            if (otherIcon && otherIcon instanceof HTMLElement) {
              otherIcon.classList.remove("rotate-180");
            }
            const otherDropdown = otherToggle.closest(
              ".dropdown"
            ) as HTMLElement | null;
            if (otherDropdown && otherDropdown instanceof HTMLElement) {
              const otherMenu = otherDropdown.querySelector(
                ".dropdown-menu"
              ) as HTMLElement | null;
              if (otherMenu && otherMenu instanceof HTMLElement) {
                otherMenu.classList.add("hidden");
                otherMenu.classList.remove("opacity-100");
                otherMenu.classList.add("opacity-0");
              }
            }
          }
        });

        // Toggle current dropdown
        if (isExpanded) {
          toggle.setAttribute("aria-expanded", "false");
          if (menu && menu instanceof HTMLElement) {
            menu.classList.add("hidden");
            menu.classList.remove("opacity-100");
            menu.classList.add("opacity-0");
          }
          if (icon && icon instanceof HTMLElement) {
            icon.classList.remove("rotate-180");
          }
        } else {
          toggle.setAttribute("aria-expanded", "true");
          if (menu && menu instanceof HTMLElement) {
            menu.classList.remove("hidden");
            setTimeout(() => {
              if (menu && menu instanceof HTMLElement) {
                menu.classList.remove("opacity-0");
                menu.classList.add("opacity-100");
              }
            }, 10);
          }
          if (icon && icon instanceof HTMLElement) {
            icon.classList.add("rotate-180");
          }
        }
      });

      // Handle keyboard navigation
      toggle.addEventListener("keydown", (e) => {
        if (
          e instanceof KeyboardEvent &&
          (e.key === "Enter" || e.key === " ")
        ) {
          e.preventDefault();
          (toggle as HTMLElement).click();
        } else if (e instanceof KeyboardEvent && e.key === "Escape") {
          closeAllDropdowns();
        }
      });
    });
  }

  // Initialize header on initial page load
  document.addEventListener('astro:page-load', initHeader);
</script>

<style>
  /* Header enhancements */
  .header-nav {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    height: 64px;
    min-height: 64px;
    max-height: 64px;
    overflow: visible;
  }

  /* Ensure mobile menu doesn't affect desktop */
  @media (min-width: 768px) {
    .mobile-menu {
      display: none !important;
    }
  }

  /* Logo animation */
  .logo-link {
    transition: all 0.3s ease;
  }

  .logo-link:hover {
    filter: drop-shadow(0 4px 8px rgba(59, 130, 246, 0.3));
  }

  /* Navigation item enhancements */
  .nav-item {
    position: relative;
    overflow: hidden;
  }

  .nav-item:hover {
    color: rgb(59, 130, 246);
    transform: translateY(-1px);
  }

  .nav-item:active {
    transform: translateY(0);
  }

  /* Active state for current page */
  .nav-item[data-active="true"] {
    color: rgb(59, 130, 246);
  }
  .nav-item[data-active="true"] .nav-indicator {
    width: 75%;
    left: 50%;
    transform: translateX(-50%);
    height: 2px;
  }

  /* Mobile menu enhancements */
  .mobile-menu {
    max-height: calc(100vh - 64px);
    overflow-y: auto;
  }

  @media (max-width: 767px) {
    .mobile-menu.hidden {
      display: block !important;
      pointer-events: none;
    }
  }

  @media (min-width: 768px) {
    .mobile-menu {
      display: none !important;
      visibility: hidden !important;
      height: 0 !important;
      overflow: hidden !important;
    }
  }

  .mobile-menu-item {
    position: relative;
    overflow: hidden;
  }

  .mobile-menu-item:hover {
    color: rgb(59, 130, 246);
    transform: translateX(4px);
  }

  .mobile-menu-item:active {
    transform: translateX(2px) scale(0.98);
  }

  .mobile-menu-item[data-active="true"] {
    color: rgb(59, 130, 246);
    font-weight: 600;
  }

  /* Mobile menu button */
  .mobile-menu-btn:hover {
    background-color: rgba(0, 0, 0, 0.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  /* Hamburger animation */
  .hamburger-line {
    transform-origin: center;
  }

  /* Dark mode adjustments */
  :global(.dark) .header-nav {
    background-color: rgba(17, 24, 39, 0.85) !important;
    border-bottom-color: rgba(255, 255, 255, 0.1) !important;
  }

  :global(.dark) .mobile-menu {
    background: linear-gradient(
      135deg,
      rgba(17, 24, 39, 0.95),
      rgba(17, 24, 39, 0.9)
    ) !important;
    border-top-color: rgba(255, 255, 255, 0.1) !important;
  }

  :global(.dark) .mobile-menu-btn {
    background-color: rgba(255, 255, 255, 0.05) !important;
  }

  :global(.dark) .mobile-menu-btn:hover {
    background-color: rgba(255, 255, 255, 0.1) !important;
  }

  :global(.dark) .dropdown-menu {
    background-color: rgba(31, 41, 55, 0.95) !important;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .mobile-menu-item {
      animation: slideInFromRight 0.3s ease-out forwards;
      opacity: 0;
      transform: translateX(20px);
    }
  }

  @keyframes slideInFromRight {
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  /* Smooth scrolling improvements */
  @media (prefers-reduced-motion: no-preference) {
    .nav-item,
    .mobile-menu-item {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }

  /* Focus states for accessibility */
  .nav-item:focus-visible,
  .mobile-menu-item:focus-visible {
    outline: 2px solid rgb(59, 130, 246);
    outline-offset: 2px;
  }
</style>
