
**Agno is a lightweight library for building Multimodal Agents.**

1. Build lightning-fast Agents that work with text, image, audio and video.
2. Add memory, knowledge and tools as needed.
3. Run anywhere, Agno is open-source.

## [​](https://docs.agno.com/introduction\#ai-engineering-is-software-engineering)  AI Engineering is Software Engineering

When building AI products, 80% of your solution will be standard python code, and the remaining 20% will use Agents for automation. Agno is designed for such use cases.

Write your AI logic using familiar programming constructs (if, else, while, for) and avoid complex abstractions like graphs and chains. Here’s a simple Agent that can search the web:

websearch\_agent.py

Copy

```python
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    tools=[DuckDuckGoTools()],
    markdown=True
)
agent.print_response("What's happening in New York?", stream=True)

```

## [​](https://docs.agno.com/introduction\#key-features)  Key features

Agno is designed to be simple, fast and model agnostic. Here are some key features:

- **Lightning Fast**: Agent creation is 10,000x faster than LangGraph (see [performance](https://github.com/agno-agi/agno#performance)).
- **Model Agnostic**: Use any model, any provider, no lock-in.
- **Multi Modal**: Native support for text, image, audio and video.
- **Multi Agent**: Build teams of specialized agents.
- **Memory Management**: Store agent sessions and state in a database.
- **Knowledge Stores**: Use vector databases for RAG or dynamic few-shot.
- **Structured Outputs**: Make Agents respond with structured data.
- **Monitoring**: Track agent sessions and performance in real-time on [agno.com](https://app.agno.com/).

## [​](https://docs.agno.com/introduction\#get-started)  Get Started

If you’re new to Agno, start here to build your first Agent.

[**Build your first Agent** \\
\\
Learn how to build Agents with Agno](https://docs.agno.com/get-started/agents) [**Agent Playground** \\
\\
Chat with your Agents using a beautiful Agent UI](https://docs.agno.com/get-started/playground)

[**Agent Observability**](https://docs.agno.com/get-started/monitoring)

[Monitor your Agents on](https://docs.agno.com/get-started/monitoring) [agno.com](https://app.agno.com/)

After that, checkout the [Examples Gallery](https://docs.agno.com/examples) to discover real-world applications built with Agno.

## [​](https://docs.agno.com/introduction\#build-with-agno)  Build with Agno

Agno is a battle-tested framework with best-in-class performance, checkout the following guides to dive-in:





##  What are Agents?

**Agents** are AI programs that execute tasks autonomously. They solve problems by running tools, accessing knowledge and memory to improve responses. Unlike traditional programs that follow a predefined execution path, agents dynamically adapt their approach based on context, knowledge and tool results.

Instead of a rigid binary definition, let’s think of Agents in terms of agency and autonomy.

- **Level 0**: Agents with no tools (basic inference tasks).
- **Level 1**: Agents with tools for autonomous task execution.
- **Level 2**: Agents with knowledge, combining memory and reasoning.
- **Level 3**: Teams of specialized agents collaborating on complex workflows.

## [​](https://docs.agno.com/get-started/agents\#basic-agent)  Basic Agent

basic\_agent.py

Copy

```python
from agno.agent import Agent
from agno.models.openai import OpenAIChat

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    description="You are an enthusiastic news reporter with a flair for storytelling!",
    markdown=True
)
agent.print_response("Tell me about a breaking news story from New York.", stream=True)

```

To run the agent, install dependencies and export your `OPENAI_API_KEY`.

1

Setup your virtual environment

Mac

Windows

Copy

```bash
python3 -m venv .venv
source .venv/bin/activate

```

2

Install dependencies

Mac

Windows

Copy

```bash
pip install -U openai agno

```

3

Export your OpenAI key

Mac

Windows

Copy

```bash
export OPENAI_API_KEY=sk-***

```

4

Run the agent

Copy

```shell
python basic_agent.py

```

## [​](https://docs.agno.com/get-started/agents\#agent-with-tools)  Agent with tools

This basic agent will obviously make up a story, lets give it a tool to search the web.

agent\_with\_tools.py

Copy

```python
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    description="You are an enthusiastic news reporter with a flair for storytelling!",
    tools=[DuckDuckGoTools()],
    show_tool_calls=True,
    markdown=True
)
agent.print_response("Tell me about a breaking news story from New York.", stream=True)

```

Install dependencies and run the Agent

1

Install dependencies

Mac

Windows

Copy

```bash
pip install -U duckduckgo-search

```

2

Run the agent

Copy

```shell
python agent_with_tools.py

```

Now you should see a much more relevant result.

## [​](https://docs.agno.com/get-started/agents\#agent-with-knowledge)  Agent with knowledge

Agents can store knowledge in a vector database and use it for RAG or dynamic few-shot learning.

**Agno agents use Agentic RAG** by default, which means they will search their knowledge base for the specific information they need to achieve their task.

agent\_with\_knowledge.py

Copy

```python
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.embedder.openai import OpenAIEmbedder
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.vectordb.lancedb import LanceDb, SearchType

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    description="You are a Thai cuisine expert!",
    instructions=[\
        "Search your knowledge base for Thai recipes.",\
        "If the question is better suited for the web, search the web to fill in gaps.",\
        "Prefer the information in your knowledge base over the web results."\
    ],
    knowledge=PDFUrlKnowledgeBase(
        urls=["https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
        vector_db=LanceDb(
            uri="tmp/lancedb",
            table_name="recipes",
            search_type=SearchType.hybrid,
            embedder=OpenAIEmbedder(id="text-embedding-3-small"),
        ),
    ),
    tools=[DuckDuckGoTools()],
    show_tool_calls=True,
    markdown=True
)

# Comment out after the knowledge base is loaded
if agent.knowledge is not None:
    agent.knowledge.load()

agent.print_response("How do I make chicken and galangal in coconut milk soup", stream=True)
agent.print_response("What is the history of Thai curry?", stream=True)

```

Install dependencies and run the Agent

1

Install dependencies

Mac

Windows

Copy

```bash
pip install -U lancedb tantivy pypdf duckduckgo-search

```

2

Run the agent

Copy

```shell
python agent_with_knowledge.py

```

##   Multi Agent Teams

Agents work best when they have a singular purpose, a narrow scope and a small number of tools. When the number of tools grows beyond what the language model can handle or the tools belong to different categories, use a team of agents to spread the load.

agent\_team.py

Copy

```python
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.yfinance import YFinanceTools

web_agent = Agent(
    name="Web Agent",
    role="Search the web for information",
    model=OpenAIChat(id="gpt-4o"),
    tools=[DuckDuckGoTools()],
    instructions="Always include sources",
    show_tool_calls=True,
    markdown=True,
)

finance_agent = Agent(
    name="Finance Agent",
    role="Get financial data",
    model=OpenAIChat(id="gpt-4o"),
    tools=[YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True)],
    instructions="Use tables to display data",
    show_tool_calls=True,
    markdown=True,
)

agent_team = Agent(
    team=[web_agent, finance_agent],
    model=OpenAIChat(id="gpt-4o"),
    instructions=["Always include sources", "Use tables to display data"],
    show_tool_calls=True,
    markdown=True,
)

agent_team.print_response("What's the market outlook and financial performance of AI semiconductor companies?", stream=True)

```

Install dependencies and run the Agent team

1

Install dependencies

Mac

Windows

Copy

```bash
pip install -U duckduckgo-search yfinance

```

2

Run the agent

Copy

```shell
python agent_team.py

```

## [​](https://docs.agno.com/get-started/agents\#debugging)  Debugging

Want to see the system prompt, user messages and tool calls?

Agno includes a built-in debugger that will print debug logs in the terminal. Set `debug_mode=True` on any agent or set `AGNO_DEBUG=true` in your environment.

debugging.py

Copy

```python
from agno.agent import Agent

agent = Agent(markdown=True, debug_mode=True)
agent.print_response("Share a 2 sentence horror story")

```

Run the agent to view debug logs in the terminal:

Copy

```shell
python debugging.py

```
[Agno home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/black.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/white.svg)](https://docs.agno.com/)

Search or ask...

Ctrl K

Search...

Navigation

Models

OpenRouter

[User Guide](https://docs.agno.com/introduction) [Examples](https://docs.agno.com/examples/introduction) [Reference](https://docs.agno.com/reference/agents/agent) [Changelog](https://docs.agno.com/changelog/overview) [FAQs](https://docs.agno.com/faq/environment_variables) [Hackathon Resources](https://docs.agno.com/hackathon/introduction)

OpenRouter is a platform for providing endpoints for Large Language models.

## [​](https://docs.agno.com/models/openrouter\#authentication)  Authentication

Set your `OPENROUTER_API_KEY` environment variable. Get your key from [here](https://openrouter.ai/settings/keys).

Mac

Windows

Copy

```bash
export OPENROUTER_API_KEY=***

```

## [​](https://docs.agno.com/models/openrouter\#example)  Example

Use `OpenRouter` with your `Agent`:

agent.py

Copy

```python
from agno.agent import Agent, RunResponse
from agno.models.openrouter import OpenRouter

agent = Agent(
    model=OpenRouter(id="gpt-4o"),
    markdown=True
)

# Print the response in the terminal
agent.print_response("Share a 2 sentence horror story.")

```

## [​](https://docs.agno.com/models/openrouter\#params)  Params

| Parameter | Type | Default | Description |
| --- | --- | --- | --- |
| `id` | `str` | `"gpt-4o"` | The specific model ID used for generating responses. |
| `name` | `str` | `"OpenRouter"` | The name identifier for the OpenRouter agent. |
| `provider` | `str` | `"OpenRouter:"+id` | The provider of the model, combining "OpenRouter" with the model ID. |
| `api_key` | `Optional[str]` | - | The API key for authenticating requests to the OpenRouter service. Retrieved from the environment variable `OPENROUTER_API_KEY`. |
| `base_url` | `str` | `"https://openrouter.ai/api/v1"` | The base URL for making API requests to the OpenRouter service. |
| `max_tokens` | `int` | `1024` | The maximum number of tokens to generate in the response. |

`OpenRouter` also supports the params of [OpenAI](https://docs.agno.com/reference/models/openai).


**DuckDuckGo** enables an Agent to search the web for information.

## [​](https://docs.agno.com/tools/toolkits/duckduckgo\#prerequisites)  Prerequisites

The following example requires the `duckduckgo-search` library. To install DuckDuckGo, run the following command:

Copy

```shell
pip install -U duckduckgo-search

```

## [​](https://docs.agno.com/tools/toolkits/duckduckgo\#example)  Example

cookbook/tools/duckduckgo.py

Copy

```python
from agno.agent import Agent
from agno.tools.duckduckgo import DuckDuckGoTools

agent = Agent(tools=[DuckDuckGoTools()], show_tool_calls=True)
agent.print_response("Whats happening in France?", markdown=True)

```

## [​](https://docs.agno.com/tools/toolkits/duckduckgo\#toolkit-params)  Toolkit Params

| Parameter | Type | Default | Description |
| --- | --- | --- | --- |
| `search` | `bool` | `True` | Enables the use of the `duckduckgo_search` function to search DuckDuckGo for a query. |
| `news` | `bool` | `True` | Enables the use of the `duckduckgo_news` function to fetch the latest news via DuckDuckGo. |
| `fixed_max_results` | `int` | - | Sets a fixed number of maximum results to return. No default is provided, must be specified if used. |
| `headers` | `Any` | - | Accepts any type of header values to be sent with HTTP requests. |
| `proxy` | `str` | - | Specifies a single proxy address as a string to be used for the HTTP requests. |
| `proxies` | `Any` | - | Accepts a dictionary of proxies to be used for HTTP requests. |
| `timeout` | `int` | `10` | Sets the timeout for HTTP requests, in seconds. |

## [​](https://docs.agno.com/tools/toolkits/duckduckgo\#toolkit-functions)  Toolkit Functions

| Function | Description |
| --- | --- |
| `duckduckgo_search` | Use this function to search DuckDuckGo for a query. |
| `duckduckgo_news` | Use this function to get the latest news from DuckDuckGo. |





**Crawl4aiTools** enable an Agent to perform web crawling and scraping tasks using the Crawl4ai library.

## [​](https://docs.agno.com/tools/toolkits/crawl4ai\#prerequisites)  Prerequisites

The following example requires the `crawl4ai` library.

Copy

```shell
pip install -U crawl4ai

```

## [​](https://docs.agno.com/tools/toolkits/crawl4ai\#example)  Example

The following agent will scrape the content from the [https://github.com/agno-agi/agno](https://github.com/agno-agi/agno) webpage:

cookbook/tools/crawl4ai\_tools.py

Copy

```python
from agno.agent import Agent
from agno.tools.crawl4ai import Crawl4aiTools

agent = Agent(tools=[Crawl4aiTools(max_length=None)], show_tool_calls=True)
agent.print_response("Tell me about https://github.com/agno-agi/agno.")

```

## [​](https://docs.agno.com/tools/toolkits/crawl4ai\#toolkit-params)  Toolkit Params

| Parameter | Type | Default | Description |
| --- | --- | --- | --- |
| `max_length` | `int` | `1000` | Specifies the maximum length of the text from the webpage to be returned. |

## [​](https://docs.agno.com/tools/toolkits/crawl4ai\#toolkit-functions)  Toolkit Functions

| Function | Description |
| --- | --- |
| `web_crawler` | Crawls a website using crawl4ai’s WebCrawler. Parameters include ‘url’ for the URL to crawl and an optional ‘max\_length’ to limit the length of extracted content. The default value for ‘max\_length’ is 1000. |


VectorDbs

LanceDB Agent Knowledge



## [​](https://docs.agno.com/vectordb/lancedb\#setup)  Setup

Copy

```shell
pip install lancedb

```

## [​](https://docs.agno.com/vectordb/lancedb\#example)  Example

agent\_with\_knowledge.py

Copy

```python
import typer
from typing import Optional
from rich.prompt import Prompt

from agno.agent import Agent
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.vectordb.lancedb import LanceDb
from agno.vectordb.search import SearchType

# LanceDB Vector DB
vector_db = LanceDb(
    table_name="recipes",
    uri="/tmp/lancedb",
    search_type=SearchType.keyword,
)

# Knowledge Base
knowledge_base = PDFUrlKnowledgeBase(
    urls=["https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
    vector_db=vector_db,
)

def lancedb_agent(user: str = "user"):
    run_id: Optional[str] = None

    agent = Agent(
        run_id=run_id,
        user_id=user,
        knowledge=knowledge_base,
        show_tool_calls=True,
        debug_mode=True,
    )

    if run_id is None:
        run_id = agent.run_id
        print(f"Started Run: {run_id}\n")
    else:
        print(f"Continuing Run: {run_id}\n")

    while True:
        message = Prompt.ask(f"[bold] :sunglasses: {user} [/bold]")
        if message in ("exit", "bye"):
            break
        agent.print_response(message)

if __name__ == "__main__":
    # Comment out after first run
    knowledge_base.load(recreate=True)

    typer.run(lancedb_agent)

```

## [​](https://docs.agno.com/vectordb/lancedb\#lancedb-params)  LanceDb Params

| Parameter | Type | Default | Description |
| --- | --- | --- | --- |
| `uri` | `str` | - | The URI to connect to. |
| `table` | `LanceTable` | - | The Lance table to use. |
| `table_name` | `str` | - | The name of the table to use. |
| `connection` | `DBConnection` | - | The database connection to use. |
| `api_key` | `str` | - | The API key to use. |
| `embedder` | `Embedder` | - | The embedder to use. |
| `search_type` | `SearchType` | vector | The search type to use. |
| `distance` | `Distance` | cosine | The distance to use. |
| `nprobes` | `int` | - | The number of probes to use. [More Info](https://lancedb.github.io/lancedb/ann_indexes/#use-gpu-to-build-vector-index) |
| `reranker` | `Reranker` | - | The reranker to use. [More Info](https://lancedb.github.io/lancedb/hybrid_search/eval/) |
| `use_tantivy` | `bool` | - | Whether to use tantivy. |



Memory

Built-in Memory

[User Guide](https://docs.agno.com/introduction) [Examples](https://docs.agno.com/examples/introduction) [Reference](https://docs.agno.com/reference/agents/agent) [Changelog](https://docs.agno.com/changelog/overview) [FAQs](https://docs.agno.com/faq/environment_variables) [Hackathon Resources](https://docs.agno.com/hackathon/introduction)

## [​](https://docs.agno.com/examples/concepts/memory/builtin-memory\#code)  Code

cookbook/agent\_concepts/memory/01\_builtin\_memory.py

Copy

```python
from agno.agent import Agent
from agno.models.openai import OpenAIChat
from rich.pretty import pprint

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    # Set add_history_to_messages=true to add the previous chat history to the messages sent to the Model.
    add_history_to_messages=True,
    # Number of historical responses to add to the messages.
    num_history_responses=3,
    description="You are a helpful assistant that always responds in a polite, upbeat and positive manner.",
)

# -*- Create a run
agent.print_response("Share a 2 sentence horror story", stream=True)
# -*- Print the messages in the memory
pprint([m.model_dump(include={"role", "content"}) for m in agent.memory.messages])

# -*- Ask a follow up question that continues the conversation
agent.print_response("What was my first message?", stream=True)
# -*- Print the messages in the memory
pprint([m.model_dump(include={"role", "content"}) for m in agent.memory.messages])

```

## [​](https://docs.agno.com/examples/concepts/memory/builtin-memory\#usage)  Usage

1

Create a virtual environment

Open the `Terminal` and create a python virtual environment.

Mac

Windows

Copy

```bash
python3 -m venv .venv
source .venv/bin/activate

```

2

Set your API key

Copy

```bash
export OPENAI_API_KEY=xxx

```

3

Install libraries

Copy

```bash
pip install -U openai sqlalchemy agno

```

4

Run Agent

Mac

Windows

Copy

```bash
python cookbook/agent_concepts/memory/01_builtin_memory.py

```
[Agno home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/black.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/white.svg)](https://docs.agno.com/)

Search or ask...

Ctrl K

Search...

Navigation

Teams

News Agency Team

[User Guide](https://docs.agno.com/introduction) [Examples](https://docs.agno.com/examples/introduction) [Reference](https://docs.agno.com/reference/agents/agent) [Changelog](https://docs.agno.com/changelog/overview) [FAQs](https://docs.agno.com/faq/environment_variables) [Hackathon Resources](https://docs.agno.com/hackathon/introduction)

## [​](https://docs.agno.com/examples/concepts/teams/news-agency-team\#code)  Code

Copy

```python
from pathlib import Path

from agno.agent import Agent
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.file import FileTools
from agno.tools.newspaper4k import Newspaper4kTools

urls_file = Path(__file__).parent.joinpath("tmp", "urls__{session_id}.md")
urls_file.parent.mkdir(parents=True, exist_ok=True)

searcher = Agent(
    name="Searcher",
    role="Searches the top URLs for a topic",
    instructions=[\
        "Given a topic, first generate a list of 3 search terms related to that topic.",\
        "For each search term, search the web and analyze the results.Return the 10 most relevant URLs to the topic.",\
        "You are writing for the New York Times, so the quality of the sources is important.",\
    ],
    tools=[DuckDuckGoTools()],
    save_response_to_file=str(urls_file),
    add_datetime_to_instructions=True,
)
writer = Agent(
    name="Writer",
    role="Writes a high-quality article",
    description=(
        "You are a senior writer for the New York Times. Given a topic and a list of URLs, "
        "your goal is to write a high-quality NYT-worthy article on the topic."
    ),
    instructions=[\
        f"First read all urls in {urls_file.name} using `get_article_text`."\
        "Then write a high-quality NYT-worthy article on the topic."\
        "The article should be well-structured, informative, engaging and catchy.",\
        "Ensure the length is at least as long as a NYT cover story -- at a minimum, 15 paragraphs.",\
        "Ensure you provide a nuanced and balanced opinion, quoting facts where possible.",\
        "Focus on clarity, coherence, and overall quality.",\
        "Never make up facts or plagiarize. Always provide proper attribution.",\
        "Remember: you are writing for the New York Times, so the quality of the article is important.",\
    ],
    tools=[Newspaper4kTools(), FileTools(base_dir=urls_file.parent)],
    add_datetime_to_instructions=True,
)

editor = Agent(
    name="Editor",
    team=[searcher, writer],
    description="You are a senior NYT editor. Given a topic, your goal is to write a NYT worthy article.",
    instructions=[\
        "First ask the search journalist to search for the most relevant URLs for that topic.",\
        "Then ask the writer to get an engaging draft of the article.",\
        "Edit, proofread, and refine the article to ensure it meets the high standards of the New York Times.",\
        "The article should be extremely articulate and well written. "\
        "Focus on clarity, coherence, and overall quality.",\
        "Remember: you are the final gatekeeper before the article is published, so make sure the article is perfect.",\
    ],
    add_datetime_to_instructions=True,
    markdown=True,
    debug_mode=True
)
editor.print_response("Write an article about latest developments in AI.")

```

## [​](https://docs.agno.com/examples/concepts/teams/news-agency-team\#usage)  Usage

1

Create a virtual environment

Open the `Terminal` and create a python virtual environment.

Mac

Windows

Copy

```bash
python3 -m venv .venv
source .venv/bin/activate

```

2

Set your API key

Copy

```bash
export OPENAI_API_KEY=xxx

```

3

Install libraries

Copy

```bash
pip install -U openai duckduckgo-search newspaper4k lxml_html_clean agno

```

4

Run Agent

Mac

Windows

Copy

```bash
python cookbook/agent_concepts/teams/news_agency_team.py

```

[Agno home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/black.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/white.svg)](https://docs.agno.com/)

Search or ask...

Ctrl K

Search...

Navigation

Teams

Direct Response Team

[User Guide](https://docs.agno.com/introduction) [Examples](https://docs.agno.com/examples/introduction) [Reference](https://docs.agno.com/reference/agents/agent) [Changelog](https://docs.agno.com/changelog/overview) [FAQs](https://docs.agno.com/faq/environment_variables) [Hackathon Resources](https://docs.agno.com/hackathon/introduction)

## [​](https://docs.agno.com/examples/concepts/teams/respond-directly\#code)  Code

Copy

```python
from textwrap import dedent

from agno.agent import Agent
from agno.models.openai import OpenAIChat
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.yfinance import YFinanceTools

web_agent = Agent(
    name="Web Agent",
    role="Search the web for information",
    model=OpenAIChat(id="gpt-4o"),
    tools=[DuckDuckGoTools()],
    instructions=["Always include sources"],
    expected_output=dedent("""\
    ## {title}

    {Answer to the user's question}
    """),
    # This will make the agent respond directly to the user, rather than through the team leader.
    respond_directly=True,
    markdown=True,
)

finance_agent = Agent(
    name="Finance Agent",
    role="Get financial data",
    model=OpenAIChat(id="gpt-4o"),
    tools=[\
        YFinanceTools(stock_price=True, analyst_recommendations=True, company_info=True)\
    ],
    instructions=["Use tables to display data"],
    expected_output=dedent("""\
    ## {title}

    {Answer to the user's question}
    """),
    # This will make the agent respond directly to the user, rather than through the team leader.
    respond_directly=True,
    markdown=True,
)

agent_team = Agent(
    team=[web_agent, finance_agent],
    instructions=["Always include sources", "Use tables to display data"],
    markdown=True,
    debug_mode=True
)

agent_team.print_response(
    "Summarize analyst recommendations and share the latest news for NVDA", stream=True
)

```

## [​](https://docs.agno.com/examples/concepts/teams/respond-directly\#usage)  Usage

1

Create a virtual environment

Open the `Terminal` and create a python virtual environment.

Mac

Windows

Copy

```bash
python3 -m venv .venv
source .venv/bin/activate

```

2

Set your API key

Copy

```bash
export OPENAI_API_KEY=xxx

```

3

Install libraries

Copy

```bash
pip install -U openai duckduckgo-search yfinance agno

```

4

Run Agent

Mac

Windows

Copy

```bash
python cookbook/agent_concepts/teams/respond_directly.py

```
[Agno home page![light logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/black.svg)![dark logo](https://mintlify.s3.us-west-1.amazonaws.com/agno/logo/white.svg)](https://docs.agno.com/)

Search or ask...

Ctrl K

Search...

Navigation

RAG

Agentic RAG with LanceDB

[User Guide](https://docs.agno.com/introduction) [Examples](https://docs.agno.com/examples/introduction) [Reference](https://docs.agno.com/reference/agents/agent) [Changelog](https://docs.agno.com/changelog/overview) [FAQs](https://docs.agno.com/faq/environment_variables) [Hackathon Resources](https://docs.agno.com/hackathon/introduction)

## [​](https://docs.agno.com/examples/concepts/rag/agentic-rag-lancedb\#code)  Code

Copy

```python
from agno.agent import Agent
from agno.embedder.openai import OpenAIEmbedder
from agno.knowledge.pdf_url import PDFUrlKnowledgeBase
from agno.models.openai import OpenAIChat
from agno.vectordb.lancedb import LanceDb, SearchType

# Create a knowledge base of PDFs from URLs
knowledge_base = PDFUrlKnowledgeBase(
    urls=["https://agno-public.s3.amazonaws.com/recipes/ThaiRecipes.pdf"],
    # Use LanceDB as the vector database and store embeddings in the `recipes` table
    vector_db=LanceDb(
        table_name="recipes",
        uri="tmp/lancedb",
        search_type=SearchType.vector,
        embedder=OpenAIEmbedder(id="text-embedding-3-small"),
    ),
)
# Load the knowledge base: Comment after first run as the knowledge base is already loaded
knowledge_base.load()

agent = Agent(
    model=OpenAIChat(id="gpt-4o"),
    knowledge=knowledge_base,
    # Add a tool to search the knowledge base which enables agentic RAG.
    # This is enabled by default when `knowledge` is provided to the Agent.
    search_knowledge=True,
    show_tool_calls=True,
    markdown=True,
)
agent.print_response(
    "How do I make chicken and galangal in coconut milk soup", stream=True
)

```

## [​](https://docs.agno.com/examples/concepts/rag/agentic-rag-lancedb\#usage)  Usage

1

Create a virtual environment

Open the `Terminal` and create a python virtual environment.

Mac

Windows

Copy

```bash
python3 -m venv .venv
source .venv/bin/activate

```

2

Set your API key

Copy

```bash
export OPENAI_API_KEY=xxx

```

3

Install libraries

Copy

```bash
pip install -U openai lancedb tantivy pypdf sqlalchemy agno

```

4

Run Agent

Mac

Windows

Copy

```bash
python cookbook/agent_concepts/rag/agentic_rag_lancedb.py

```
